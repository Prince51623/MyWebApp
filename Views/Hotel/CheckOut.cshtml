@model IEnumerable<MyWebApp.Models.Booking>

@{
    ViewData["Title"] = "Guest Check-out";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4">Check-out Management</h1>
            <p class="lead">Process guest check-outs for Crystal Castle Hotel</p>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No guests are currently checked in.
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Currently Checked-in Guests</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Booking ID</th>
                                <th>Guest Details</th>
                                <th>Room</th>
                                <th>Stay Details</th>
                                <th>Charges</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var booking in Model)
                            {
                                <tr>
                                    <td>#@booking.Id</td>
                                    <td>
                                        <strong>@booking.Guest?.Name</strong><br />
                                        <small class="text-muted">@booking.Guest?.PhoneNumber</small>
                                    </td>
                                    <td>
                                        Room @booking.RoomNumber<br />
                                        <small class="text-muted">@booking.Room?.RoomType</small>
                                    </td>
                                    <td>
                                        <strong>Check-in:</strong> @booking.ActualCheckInDate?.ToString("MMM dd, yyyy HH:mm")<br />
                                        <strong>Expected Check-out:</strong> @booking.CheckOutDate.ToString("MMM dd, yyyy")
                                    </td>
                                    <td>
                                        <div class="mb-1">Room: $@booking.TotalPrice (₹@booking.TotalPriceInINR)</div>
                                        <div class="mb-1">Extra: $@booking.AdditionalCharges (₹@(booking.AdditionalCharges * 83))</div>
                                        <div class="fw-bold">Total: $@booking.FinalTotal (₹@booking.FinalTotalInINR)</div>
                                    </td>
                                    <td>
                                        <div class="btn-group-vertical w-100">
                                            <button type="button" class="btn btn-outline-primary btn-sm mb-2" 
                                                    onclick="showAddChargesModal(@booking.Id)">
                                                <i class="bi bi-plus-circle"></i> Add Charges
                                            </button>
                                            <form asp-action="ProcessCheckOut" asp-route-id="@booking.Id" method="post">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-success btn-sm w-100" 
                                                        onclick="return confirm('Confirm check-out for guest @(booking.Guest?.Name)?')">
                                                    <i class="bi bi-box-arrow-right"></i> Process Check-out
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Add Charges Modal -->
<div class="modal fade" id="addChargesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Add Additional Charges</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="AddCharges" method="post" id="addChargesForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="bookingIdForCharges" name="bookingId" />
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount ($)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="amount" name="amount" 
                                   step="0.01" min="0.01" required placeholder="Enter amount" />
                        </div>
                        <div class="form-text">Amount in INR: ₹<span id="amountInRupees">0.00</span></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Charges</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
        <script>
            // Auto-hide alerts after 5 seconds (Bootstrap 5)
            setTimeout(function () {
                document.querySelectorAll('.alert').forEach(function (el) {
                    var bsAlert = bootstrap.Alert.getOrCreateInstance(el);
                    bsAlert.close();
                });
            }, 5000);

            // Initialize Bootstrap tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Handle the charges modal
            function showAddChargesModal(bookingId) {
                document.getElementById('bookingIdForCharges').value = bookingId;
                var amountEl = document.getElementById('amount');
                var amountInRupeesEl = document.getElementById('amountInRupees');
                if (amountEl) amountEl.value = '';
                if (amountInRupeesEl) amountInRupeesEl.textContent = '0.00';
                var modal = new bootstrap.Modal(document.getElementById('addChargesModal'));
                modal.show();
            }

            // Calculate INR amount (guard in case element not present)
            var amountInput = document.getElementById('amount');
            if (amountInput) {
                amountInput.addEventListener('input', function(e) {
                    const amount = parseFloat(e.target.value) || 0;
                    const inr = (amount * 83).toFixed(2);
                    var inrEl = document.getElementById('amountInRupees');
                    if (inrEl) inrEl.textContent = inr;
                });
            }

            // Form validation
            var addChargesForm = document.getElementById('addChargesForm');
            if (addChargesForm) {
                addChargesForm.addEventListener('submit', function(e) {
                    var amtEl = document.getElementById('amount');
                    var amount = amtEl ? parseFloat(amtEl.value) : 0;
                    if (!amount || amount <= 0) {
                        e.preventDefault();
                        alert('Please enter a valid amount greater than 0');
                    }
                });
            }
        </script>
}
